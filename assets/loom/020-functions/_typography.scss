/// Extracts a font-family name from a font usage
///
/// By default it will grab the "default" font. Specify "webfont" for the webfont version.
///
/// @group 20-tools
/// @requires $LOOM-fonts
/// @example scss
///   font-size: get-font-family(primary); // Get default version of font "primary"
///   font-size: get-font-family(secondary, webfont); // Get webfont version of font "secondary"
@function get-font-family($font-name, $font-variant: default, $font-map: $LOOM-fonts) {
  @if map-has-key($font-map, $font-name) {
    @return get-map-deep($font-map, $font-name, $font-variant);
  }

  @else {
    @warn "No matching font found for `#{$font-name}` in global font map.";

    @return null;
  }
}

/// Extract a font size from the global sizing map.
///
/// By default it will grab the "small breakpoint" version of the font-size.
/// @group 20-tools
/// @requires $LOOM-font-sizes
/// @example scss
///   font-size: get-font-size(alpha);  // Get default version of size "alpha"
///   font-size: get-font-size(beta, large); // Get large version of size "beta"
@function get-font-size($font-name, $font-size: smaller-viewport, $font-map: $LOOM-font-sizes) {
  @if map-has-key($font-map, $font-name) {
    @return get-map-deep($font-map, $font-name, $font-size, 'font-size');
  }

  @else {
    @warn "No matching font found for `#{$font-name}` in global font map.";

    @return null;
  }
}

/// Extract a line-height from the global sizing map.
///
/// By default it will grab the "small breakpoint" version of the line-height.
/// @group 20-tools
/// @requires $LOOM-font-sizes
@function get-line-height($font-name, $font-size: smaller-viewport, $font-map: $LOOM-font-sizes) {
  @if map-has-key($font-map, $font-name) {
    @return get-map-deep($font-map, $font-name, $font-size, 'line-height');
  }

  @else {
    @warn "No matching font found for `#{$font-name}` in global font map.";

    @return null;
  }
}

/// Gonverts pixel values to REMs
///
/// @parameter {number} $pixels - A font size in pixels
/// @parameter {string} $browser-content - The base font size of the page at the current breakpoint. y default, this is the value of "base" at the "small breakpoint"
///
/// @group 20-tools
/// @returns {Number} Value in REMs
@function convert-px-to-rem($pixel-size, $root-size: get-font-size($LOOM-font-size-base, smaller-viewport)) {
  @return ($pixel-size / $root-size) * 1rem;
}

/// Gonverts pixel values to EMs
///
/// @parameter {number} $pixels - A font size in pixels
/// @parameter {string} $browser-content - The base font size of the page at the current breakpoint. y default, this is the value of "base" at the "small breakpoint"
///
/// @group 20-tools
/// @returns {Number} Value in EMs
@function convert-px-to-em($pixels, $browser-context: get-font-size($LOOM-font-size-base, smaller-viewport)) {
  @return ($pixels / $browser-context) + 0em; // stylelint-disable-line length-zero-no-unit
}

/// Generates a font-size ruleset.
///
/// Does not include margins or font weights. Set those yourself, or with
/// generic-heading() or similar mixins.
///
/// By default it will grab the "smaller viewport" version of the font-size.
/// @group 20-tools
/// @see generic-heading
@mixin font-size($size-name, $size-browser-context: smaller-viewport ) {
  $font-size: null;

  @if (type-of($size-name) == string) {
    $font-size: get-font-size($size-name, $size-browser-context);
  }

  @if (type-of($size-name) == number) {
    $font-size: $size-name;
  }

  $font-size-context: get-font-size($LOOM-font-size-base, $size-browser-context);

  font-size: $font-size; // NOTE: Fallback to size in pixels
  font-size: convert-px-to-rem($font-size, $font-size-context); // stylelint-disable-line declaration-block-no-duplicate-properties
}

/// Output styling for a generic heading.
///
/// A heading typically has some margin below it and is in bolder text.
///
/// Combine with the font-size() mixin to get sizing.
///
/// @group 20-tools
/// @example scss
///   .o-h1 {
///     @include generic-heading();
///   }
@mixin generic-heading (
  $margin-size: $LOOM-typography-vertical-spacing,
  $font: $LOOM-font-family-header,
  $font-weight: $LOOM-font-weight-bold,
  $use-webfont: if($LOOM-fonts-loaded, true, false)
) {
  font-family: get-font-family($font);
  font-weight: $font-weight;
  text-rendering: optimizeLegibility;

  @if $margin-size == 0 or $margin-size == none {
    margin: 0;
  }

  @else {
    margin: 0 0 get-spacing($margin-size);
  }

  @if $use-webfont {
    .#{$LOOM-fonts-loaded} & {
      font-family: get-font-family($font, webfont);
    }
  }
}
